const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createSampleData() {
  try {
    console.log('Creating sample data for dashboard...');

    // Create sample projects
    const projects = await Promise.all([
      prisma.project.create({
        data: {
          name: 'Thi·∫øt K·∫ø C·∫ßu V∆∞·ª£t H·∫ßm Th·ªß Thi√™m',
          description: 'D·ª± √°n thi·∫øt k·∫ø c·∫ßu v∆∞·ª£t hi·ªán ƒë·∫°i t·∫°i TP.HCM',
          status: 'ACTIVE',
          startDate: new Date('2024-01-01'),
          endDate: new Date('2024-12-31'),
          priority: 'HIGH'
        }
      }),
      prisma.project.create({
        data: {
          name: 'Quy Ho·∫°ch ƒê√¥ Th·ªã Th√¥ng Minh',
          description: 'Quy ho·∫°ch t·ªïng th·ªÉ ƒë√¥ th·ªã th√¥ng minh',
          status: 'PLANNING',
          startDate: new Date('2024-03-01'),
          endDate: new Date('2025-06-30'),
          priority: 'MEDIUM'
        }
      }),
      prisma.project.create({
        data: {
          name: 'X√¢y D·ª±ng T√≤a Nh√† VƒÉn Ph√≤ng',
          description: 'T√≤a nh√† vƒÉn ph√≤ng cao t·∫ßng t·∫°i trung t√¢m',
          status: 'COMPLETED',
          startDate: new Date('2023-06-01'),
          endDate: new Date('2024-05-31'),
          priority: 'HIGH'
        }
      }),
      prisma.project.create({
        data: {
          name: 'C·∫£i T·∫°o H·ªá Th·ªëng Giao Th√¥ng',
          description: 'C·∫£i t·∫°o v√† n√¢ng c·∫•p h·ªá th·ªëng giao th√¥ng',
          status: 'ON_HOLD',
          startDate: new Date('2024-02-01'),
          endDate: new Date('2025-01-31'),
          priority: 'MEDIUM'
        }
      })
    ]);

    console.log('Created', projects.length, 'projects');

    // Create sample tasks for each project
    for (const project of projects) {
      const tasks = await Promise.all([
        prisma.task.create({
          data: {
            title: 'Kh·∫£o s√°t ƒë·ªãa h√¨nh',
            description: 'Kh·∫£o s√°t v√† ƒëo ƒë·∫°c ƒë·ªãa h√¨nh khu v·ª±c',
            status: 'COMPLETED',
            priority: 'HIGH',
            dueDate: new Date('2024-02-15'),
            projectId: project.id
          }
        }),
        prisma.task.create({
          data: {
            title: 'Thi·∫øt k·∫ø s∆° b·ªô',
            description: 'Thi·∫øt k·∫ø s∆° b·ªô v√† ph∆∞∆°ng √°n',
            status: 'IN_PROGRESS',
            priority: 'HIGH',
            dueDate: new Date('2024-04-30'),
            projectId: project.id
          }
        }),
        prisma.task.create({
          data: {
            title: 'Thi·∫øt k·∫ø chi ti·∫øt',
            description: 'Thi·∫øt k·∫ø chi ti·∫øt v√† b·∫£n v·∫Ω',
            status: 'TODO',
            priority: 'MEDIUM',
            dueDate: new Date('2024-07-31'),
            projectId: project.id
          }
        }),
        prisma.task.create({
          data: {
            title: 'L·∫≠p d·ª± to√°n',
            description: 'L·∫≠p d·ª± to√°n chi ti·∫øt d·ª± √°n',
            status: 'REVIEW',
            priority: 'LOW',
            dueDate: new Date('2024-03-31'),
            projectId: project.id
          }
        })
      ]);
      console.log('Created', tasks.length, 'tasks for project:', project.name);
    }

    // Create sample documents (skip for now due to schema issues)
    console.log('Skipping document creation due to schema issues');

    // Create sample issues (skip for now due to unique constraint)
    console.log('Skipping issue creation due to unique constraint');

    // Create sample calendar events
    const events = await Promise.all([
      prisma.calendarEvent.create({
        data: {
          title: 'H·ªçp d·ª± √°n tu·∫ßn',
          description: 'H·ªçp ƒë√°nh gi√° ti·∫øn ƒë·ªô d·ª± √°n h√†ng tu·∫ßn',
          type: 'MEETING',
          startDate: new Date('2024-01-15T09:00:00Z'),
          endDate: new Date('2024-01-15T10:00:00Z'),
          location: 'Ph√≤ng h·ªçp A',
          projectId: projects[0].id,
          createdById: '634fcc6f-af18-4bf3-9818-7faf7d4589cd'
        }
      }),
      prisma.calendarEvent.create({
        data: {
          title: 'Thuy·∫øt tr√¨nh thi·∫øt k·∫ø',
          description: 'Thuy·∫øt tr√¨nh ph∆∞∆°ng √°n thi·∫øt k·∫ø cho kh√°ch h√†ng',
          type: 'EVENT',
          startDate: new Date('2024-01-16T14:00:00Z'),
          endDate: new Date('2024-01-16T16:00:00Z'),
          location: 'H·ªôi tr∆∞·ªùng ch√≠nh',
          projectId: projects[0].id,
          createdById: '634fcc6f-af18-4bf3-9818-7faf7d4589cd'
        }
      })
    ]);

    console.log('Created', events.length, 'calendar events');

    // Create sample activity logs
    const activities = await Promise.all([
      prisma.activityLog.create({
        data: {
          action: 'create',
          objectType: 'project',
          objectId: projects[0].id,
          description: 'T·∫°o d·ª± √°n m·ªõi: Thi·∫øt K·∫ø C·∫ßu V∆∞·ª£t H·∫ßm Th·ªß Thi√™m',
          userId: '634fcc6f-af18-4bf3-9818-7faf7d4589cd'
        }
      }),
      prisma.activityLog.create({
        data: {
          action: 'upload',
          objectType: 'document',
          objectId: 'sample-doc-1',
          description: 'Upload t√†i li·ªáu: B√°o c√°o kh·∫£o s√°t ƒë·ªãa h√¨nh',
          userId: '634fcc6f-af18-4bf3-9818-7faf7d4589cd'
        }
      }),
      prisma.activityLog.create({
        data: {
          action: 'create',
          objectType: 'task',
          objectId: 'sample-task-1',
          description: 'T·∫°o c√¥ng vi·ªác: Kh·∫£o s√°t ƒë·ªãa h√¨nh',
          userId: '634fcc6f-af18-4bf3-9818-7faf7d4589cd'
        }
      }),
      prisma.activityLog.create({
        data: {
          action: 'update',
          objectType: 'task',
          objectId: 'sample-task-1',
          description: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i c√¥ng vi·ªác: Kh·∫£o s√°t ƒë·ªãa h√¨nh',
          userId: '634fcc6f-af18-4bf3-9818-7faf7d4589cd'
        }
      }),
      prisma.activityLog.create({
        data: {
          action: 'create',
          objectType: 'issue',
          objectId: 'sample-issue-1',
          description: 'T·∫°o v·∫•n ƒë·ªÅ: V·∫•n ƒë·ªÅ v·ªÅ ƒë·ªãa ch·∫•t',
          userId: '634fcc6f-af18-4bf3-9818-7faf7d4589cd'
        }
      })
    ]);

    console.log('Created', activities.length, 'activity logs');

    console.log('‚úÖ Sample data created successfully!');
    console.log('üìä Dashboard will now show real data');

  } catch (error) {
    console.error('Error creating sample data:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createSampleData(); 