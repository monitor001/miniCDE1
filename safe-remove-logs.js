#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Ch·ªâ lo·∫°i b·ªè console.log ƒë∆°n gi·∫£n, kh√¥ng ƒë·ªông ƒë·∫øn code ph·ª©c t·∫°p
function safeRemoveConsoleLogs(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    
    // Ch·ªâ lo·∫°i b·ªè console.log ƒë∆°n gi·∫£n
    const simpleConsoleLogPattern = /^\s*console\.log\([^)]*\);?\s*$/gm;
    content = content.replace(simpleConsoleLogPattern, '');
    
    // Lo·∫°i b·ªè d√≤ng tr·ªëng th·ª´a
    content = content.replace(/\n\s*\n\s*\n/g, '\n\n');
    
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content);
      console.log(`‚úÖ Cleaned: ${filePath}`);
    } else {
      console.log(`‚ÑπÔ∏è  No simple console.log found in: ${filePath}`);
    }
  } catch (error) {
    console.log(`‚ùå Error processing ${filePath}:`, error.message);
  }
}

// Ch·ªâ x·ª≠ l√Ω c√°c file c·ª• th·ªÉ ƒë√£ ƒë∆∞·ª£c ki·ªÉm tra
const filesToClean = [
  'backend/src/prisma/seed.ts',
  'frontend/src/App.tsx',
  'frontend/src/axiosConfig.ts',
  'frontend/src/pages/ProjectsNew.tsx',
  'frontend/src/pages/Tasks.tsx'
];

console.log('üßπ Safely removing simple console.log statements...\n');

filesToClean.forEach(file => {
  if (fs.existsSync(file)) {
    safeRemoveConsoleLogs(file);
  } else {
    console.log(`‚ö†Ô∏è  File not found: ${file}`);
  }
});

console.log('\n‚úÖ Safe console.log cleanup completed!');
console.log('üí° Only simple console.log statements were removed.'); 